import sys
import copy
import re
import csv
import matplotlib.pyplot as plt
from os.path import isfile, isdir, join
from os import listdir
from functools import reduce

"""
=== UTILS ===
"""

TAIL_LEN_DELAY = len('_results_delays.csv')
SCALE = 20


def getCSVFiles(path):
    regexp = re.compile(r'.*csv$')
    files = [f for f in listdir(path) if isfile(join(path, f))]
    return [f for f in files if re.search(regexp, f) is not None]


def readFile(path, name):
    file = open(path, "r")
    m = list()
    try:
        reader = csv.reader(file)
        for row in reader:
            row_float = map(float, row[1:])
            m.append(row_float)
    finally:
        file.close()
    return m


def getMin(x, y):
    if x < len(y):
        return x
    else:
        return len(y)


def trunc(v, l):
    eq_l = list()
    for elt in l:
        eq_l.append(copy.deepcopy(elt[0:v]))
    return eq_l

if __name__ == '__main__':
    if len(sys.argv) < 2:
        print('usage : display_measurements.py path_to_sources_dir ')
        sys.exit(1)

    path_to_sources_dir = sys.argv[1]
    if not isdir(path_to_sources_dir):
        print('The path to sources dir given is not correct')
        sys.exit(1)

    files = getCSVFiles(path_to_sources_dir)
    if len(files) < 2:
        print('Not enough result files into the directory given')
        sys.exit(1)

    is_delay = re.compile(r'.*delays.csv$')

    l = list()
    for f in files:

        if re.search(is_delay, f) is not None:
            l.append(readFile(join(path_to_sources_dir, f),
                              f[:-TAIL_LEN_DELAY]))

    minlen = reduce(getMin, l)

    trunc_l = trunc(minlen, l)

    x = list()
    y = list()
    for col in range(0, minlen):
        new_line = list()
        for line in trunc_l:
            for el in line[col]:
                if el < 0:
                    print(el)
                x.append(col)
                y.append(el)

    plt.scatter(x, y, s=10, alpha=0.05)
    plt.xlim([0, 1100])
    plt.ylim([0, 12000])
    plt.title('Distribution of delays')
    plt.xlabel('Messages rank')
    plt.ylabel('Delays (ms)')
    plt.savefig('ScatterPlot.pdf')
    plt.show()
